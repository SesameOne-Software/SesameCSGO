#pragma once
#include "../sdk/sdk.hpp"

#include <deque>

namespace exploits {
	inline bool has_shifted = false;
	inline bool in_exploit = false;
	inline bool will_shift = false;

	struct incoming_seq_t {
		int in_reliable_state;
		int out_reliable_state;
		int seq_nr;
		float curtime;
	};
	
	inline int last_incoming_seq_num = 0;
	inline std::deque< incoming_seq_t > incoming_seqs { };
	inline std::array<std::pair<int, int>, 150> tickshift { };

	int shifted_command ( );
	int shifted_tickbase ( );
	int last_shifted_amount ( );
	bool can_shoot ( );
	bool is_recharging ( );
	bool is_ready ( );
	bool recharge ( ucmd_t* ucmd );
	void force_recharge ( int amount, int recharge_delay );

	void update_incoming_sequences ( int stage );
	void adjust_player_time_base ( player_t* player, int simulation_ticks );
	void pack_commands ( ucmd_t* ucmd, int num, bool teleport );
	void run ( ucmd_t* ucmd );
	void shift_tickbase ( int amount, int recharge_delay );
	void extend_recharge_delay ( int recharge_delay );
}